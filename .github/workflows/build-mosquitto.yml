name: Build Mosquitto

on: push

env:
  MOSQUITTO_VERSION: 'v2.0.18'

permissions:
  contents: write
  pull-requests: write
  packages: write

jobs:
  fetch_code:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        repository: eclipse/mosquitto
        ref: refs/tags/${{ env.MOSQUITTO_VERSION }}
    - uses: actions/upload-artifact@v4
      with:
        name: mosquitto_code
        path: ./*

  semgrep_sast:
    needs: ['fetch_code']
    runs-on: ubuntu-latest
    container:
      image: semgrep/semgrep
    steps:
    - name: Download artifacts
      uses: actions/download-artifact@master
      with:
        name: mosquitto_code
        path: .
    - name: Scan with semgrep
      run: semgrep --config="p/c" --config="p/python" --error --sarif --output report.sarif --metrics=off
    - name: save report as pipeline artifact
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: mqtt_semgrep.sarif
        path: report.sarif
    
  snyk_sast:
    needs: ['fetch_code']
    runs-on: ubuntu-latest
    steps:
    - name: Download artifacts
      uses: actions/download-artifact@master
      with:
        name: mosquitto_code
        path: .
    - name: fafa
      run: ls -lah
    - uses: snyk/actions/setup@master
    - name: Run Snyk to check for vulnerabilities
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      run: snyk code test --sarif-file-output=report.sarif || true
    - name: save report as pipeline artifact
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: mqtt_snyk.sarif
        path: report.sarif

  SAST_checkpoint:
    needs: 
    - semgrep_sast
    - snyk_sast
    runs-on: ubuntu-latest
    steps:
      - name: Download semgrep report
        uses: actions/download-artifact@master
        with:
          name: mqtt_semgrep.sarif
          path: .
      - uses: geekyeggo/delete-artifact@v5
        with:
          name: mqtt_semgrep.sarig
      - name: Download snyk report
        uses: actions/download-artifact@master
        with:
          name: mqtt_snyk.sarif
          path: .
      - uses: geekyeggo/delete-artifact@v5
        with:
          name: mqtt_snyk.sarig
      - name: Merge SARIFs
        uses: microsoft/sarif-actions@v0.1
        with:
          command: 'merge . --recurse true --output-file=sast_report.sarif'
      - name: save report as pipeline artifact
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: mqtt_sast_report.sarif
          path: sast_report.sarif
    


  build:
    needs: [SAST_checkpoint]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/download-artifact@master
      with:
        name: mosquitto_code
        path: .
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    # - name: "release: Docker build"
    #   run: |
    #     TAG="$(git describe --tags)"
    #     docker buildx build \
    #       --build-arg COMMIT=$(git rev-parse --short HEAD) \
    #       --platform linux/arm64/v8,linux/386,linux/amd64,linux/arm/v6,linux/arm/v7 \
    #       -f docker/Dockerfile \
    #       --provenance=false \
    #       --push \
    #       -t ghcr.io/kinjalik/thesis_zigbee2mqtt:1.35.3 \
    #       .
    - name: Build and push
      uses: docker/build-push-action@v5
      with:
        context: docker/2.0-openssl/
        file: docker/2.0-openssl/Dockerfile
        push: true
        tags: ghcr.io/${{ github.repository_owner }}/thesis_mosquitto:${{ env.MOSQUITTO_VERSION }}
        platforms: linux/arm64/v8,linux/386,linux/amd64,linux/arm/v6,linux/arm/v7
        provenance: false
    - name: Generate SBOM
      uses: anchore/sbom-action@v0
      with:
        image: ghcr.io/${{ github.repository_owner }}/thesis_mosquitto:${{ env.MOSQUITTO_VERSION }}
        format: cyclonedx-json
        artifact-name: sbom.json
        
  SCA:
    needs: build
    runs-on: 'ubuntu-latest'
    steps:
      - name: Download SBOM
        uses: actions/download-artifact@master
        with:
          name: sbom.json
          path: .
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: sbom
          input: sbom.json
          format: sarif
          output: sca_result.sarif

        